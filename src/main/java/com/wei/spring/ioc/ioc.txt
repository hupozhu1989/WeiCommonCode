Spring IOC 容器源码分析
https://www.javadoop.com/post/spring-ioc
https://www.cnblogs.com/zrtqsk/p/3735273.html
https://yemengying.com/2016/07/14/spring-bean-life-cycle/

IOC【控制反转：将对象的创建权反转给（交给）Spring】，Spring的Bean管理：
    XML方式：<bean>标签
    注解方式：@Component--三个衍生注解@Controller @Service @Repository

DI【依赖注入，前提必须有IOC的环境，Spring管理这个类的时候将类的依赖的属性注入（设置）进来】，Spring的属性注入：
    XML方式：<bean>标签内的<constructor-arg>或<property>标签
    注解方式：@Value  @Autowired  @Resource

Spring的@Bean注解用于告诉方法，产生一个Bean对象，然后这个Bean对象交给Spring管理。产生这个Bean对象的方法Spring只会调用一次，
随后这个Spring将会将这个Bean对象放在自己的IOC容器中。SpringIOC容器管理一个或者多个bean，这些bean都需要在@Configuration注解下进行创建，
在一个方法上使用@Bean注解就表明这个方法需要交给Spring进行管理。

@Bean和@Component的区别
>注解作用
@Component注解表明一个类会作为组件类，并告知Spring要为这个类创建bean。
@Bean注解告诉Spring这个方法将会返回一个对象，这个对象要注册为Spring应用上下文中的bean。通常方法体中包含了最终产生bean实例的逻辑。
>两者对比
相同点：两者的结果都是为spring容器注册Bean.
不同点：@Component 通常是通过类路径扫描来自动侦测以及自动装配到Spring容器中。
　　　　@Bean 注解通常是我们在标有该注解的方法中定义产生这个bean的逻辑。
>理解
@Component（@Controller @Service @Repository）作用于类上，只有在我们的SpringBoot应用程序启用了组件扫描并且包含了被注解的类时才有效。
通过组件扫描，Spring将扫描整个类路径，并将所有@Component注释类添加到Spring Context，这里有的不足就是会把整个类当成bean注册到spring容器上，
如果这个类中并不是所有方法都需要注册为bean的话，会出现不需要的方法都注册成为bean，这时候必须确保这些不需要的方法也能注册为bean
或者在扫描中加filter，过滤这些不需要的bean,否者spring将无法成功启动。
@Bean相对来说就更加灵活了，它可以独立加在方法或者类上，按需注册到spring容器，而且如果你要用到第三方类库里面某个类或者方法的时候，
你就只能用@Bean把这个类或者方法注册到spring容器，因为用@Component你需要配置组件扫描到这个第三方类路径而且还要在别人源代码加上这个注解，
很明显是不现实的。


BeanDefinitionReader：该接口的作用就是加载Bean
    BeanDefinition：Spring使用BeanDefinition来描述bean
BeanFactory：BeanFactory是IOC容器的核心接口，它的职责包括：实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。BeanFactory只是个接口，
    并不是IOC容器的具体实现，但是Spring容器给出了很多种实现，如DefaultListableBeanFactory、XmlBeanFactory、ApplicationContext等，
    其中XmlBeanFactory就是常用的一个，该实现将以XML方式描述组成应用的对象及对象间的依赖关系。
BeanFactoryPostProcessor：BeanFactory后置处理器，是对BeanDefinition对象进行修改。
    BeanFactoryPostProcessor接口是针对bean容器的，它的实现类可以在当前BeanFactory初始化（spring容器加载bean定义文件）后，
    bean实例化之前修改bean的定义属性，达到影响之后实例化bean的效果。也就是说，Spring允许BeanFactoryPostProcessor在容器实例化任何其它bean之前
    读取配置元数据，并可以根据需要进行修改，例如可以把bean的scope从singleton改为prototype，也可以把property的值给修改掉。
    可以同时配置多个BeanFactoryPostProcessor，并通过设置’order’属性来控制各个BeanFactoryPostProcessor的执行次序。

    ConfigurationClassPostProcessor：ConfigurationClassPostProcessor是一个BeanFactory的后置处理器，因此它的主要功能是参与BeanFactory的建造，
    在这个类中，会解析加了@Configuration的配置类，还会解析@ComponentScan、@ComponentScans注解扫描的包，以及解析@Import等注解
BeanPostProcess：Bean后置处理器，是对生成的Bean对象进行修改。
    BeanPostProcessor能在spring容器实例化bean之后，在执行bean的初始化方法前后，添加一些自己的处理逻辑。初始化方法包括以下两种：
    1、实现InitializingBean接口的bean，对应方法为afterPropertiesSet
    2、xml定义中，通过init-method设置的方法
FactoryBean: 特殊的对象  .isSingleton()  .getObject()  .getObjectType()
    一般情况下，Spring通过反射机制利用<bean>的class属性指定实现类实例化Bean，在某些情况下，实例化Bean过程比较复杂，如果按照传统的方式，
    则需要在<bean>中提供大量的配置信息。配置方式的灵活性是受限的，这时采用编码的方式可能会得到一个简单的方案。Spring为此提供了一个
    org.springframework.bean.factory.FactoryBean的工厂类接口，用户可以通过实现该接口定制实例化Bean的逻辑。FactoryBean接口对于
    Spring框架来说占用重要的地位，Spring自身就提供了70多个FactoryBean的实现。它们隐藏了实例化一些复杂Bean的细节，给上层应用带来了便利。
    从Spring3.0开始，FactoryBean开始支持泛型，即接口声明改为FactoryBean<T>的形式
Environment：
    Spring应用的运行时简单地想象成两个部分：一个是Spring应用本身，一个是Spring应用所处的环境。Environment在容器中是一个抽象的集合，
    是指应用环境的2个方面：profiles和properties。
    1. Profile
   profile配置是一个被命名的、bean定义的逻辑组，这些bean只有在给定的profile配置激活时才会注册到容器。不管是XML还是注解，Beans都有可能指派
    给profile配置。Environment环境对象的作用，对于profiles配置来说，它能决定当前激活的是哪个profile配置，和哪个profile是默认。
    2. Properties
   properties属性可能来源于properties文件、JVM properties、system环境变量、JNDI、servlet context parameters上下文参数、专门的
    properties对象，Maps等等。Environment对象的作用，对于properties来说，是提供给用户方便的服务接口、方便撰写配置、方便解析配置。


实例化和初始化的区别
    类的实例化：是指创建一个对象的过程。这个过程中会在堆中开辟内存，将一些非静态的方法，变量存放在里面。在程序执行的过程中，可以创建多个对象，
        既多次实例化。每次实例化都会开辟一块新的内存。
    类的初始化：是完成程序执行前的准备工作。在这个阶段，静态的（变量，方法，代码块）会被执行。同时在会开辟一块存储空间用来存放静态的数据。
        初始化只在类加载的时候执行一次。


1、Spring中是如何解决循环依赖问题
    DefaultSingletonBeanRegistry类，一级缓存：Map<String, Object> singletonObjects(存放完全状态：实例化和初始化都完成)；
    二级缓存：Map<String, ObjectFactory<?>> Map<String, Object> earlySingletonObjects(存放创建中的对象-实例化完成、未完成初始化)；
    三级缓存：singletonFactories(存放创建中的对象-实例化完成、未完成初始化，获取对象的一个匿名内部类)；
    例子：A依赖B，B依赖A
    顺序：
    doCreateBean,先创建A对象,一级缓存有没有?三级缓存放入A（匿名内部类：创建中-实例化但未初始化），二级缓存删除 --> 设置A的b属性就要创建B对象了 -->
    一级缓存有没有?三级缓存放入B（匿名内部类：创建中-实例化但未初始化），二级缓存删除 --> 设置B的a属性 doGetBean() a是不是创建中? a在不在二级缓存? -->
    从三级缓存拿到a的匿名内部类,拿到A对象 --> 二级缓存放入A,三级缓存删除A --> B完全状态(实例化和初始化都完成) --> 一级缓存放入B,三级缓存移除,二级缓存移除 -->
    A对象的b属性设置值 --> A完全状态 --> 一级缓存放入A,三级缓存移除,二级缓存移除
    RuntimeBeanReference
    populateBean：填充属性

    ①每次获取bean对象的时候先从一级缓存中获取值；②创建B对象的目的是为了什么？在给A对象填充属性的时候发现需要B对象，所以顺带创建了B对象
    不管在什么时候需要对象，都是在需要的时候通过匿名内部类来生成，而不是提前放置好一个对象（非完全状态的对象、代理对象）
2、一级缓存不能解决循环依赖问题吗
    不能，如果只有一级缓存，那么意味着完全状态和非完全状态的对象都存在，如果这时候要获取某个对象，恰巧获取到非完全状态的对象，怎么办？可以添加二级缓存
3、二级缓存能不能解决问题？为什么非要使用三级缓存
    我们需要三级缓存的最主要意义在于，你所需要的类有可能是简单对象（实例化，初始化），也可能是需要进行代理的代理对象，当我向三级缓存中放置匿名内部类的时候，
    可以在获取的时候决定是简单对象，还是代理对象




记录时间
创建bean工厂,读取xml信息
设置属性值
子类扩展
执行beanFactoryPostProcessor
注册beanPostProcessor
国际化
初始化广播器
子类实现

bean的实例化、初始化   finishBeanFactoryInitialization


看spring源码需要知识：
    1.lambda表达式
    2.函数式接口
    3.多线程与高并发（锁）
    4.JVM
    5.动态代理（设计模式）


